// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=chs1, b=chs2, c=chs3, d=chs4, e=chs5, f=chs6, g=chs7, h=chs8);
    RAM8(in=in, load=chs1, address=address[0..2], out=cho1);
    RAM8(in=in, load=chs2, address=address[0..2], out=cho2);
    RAM8(in=in, load=chs3, address=address[0..2], out=cho3);
    RAM8(in=in, load=chs4, address=address[0..2], out=cho4);
    RAM8(in=in, load=chs5, address=address[0..2], out=cho5);
    RAM8(in=in, load=chs6, address=address[0..2], out=cho6);
    RAM8(in=in, load=chs7, address=address[0..2], out=cho7);
    RAM8(in=in, load=chs8, address=address[0..2], out=cho8);
    Mux8Way16(a=cho1, b=cho2, c=cho3, d=cho4, e=cho5, f=cho6, g=cho7, h=cho8, sel=address[3..5], out=out);
    
}